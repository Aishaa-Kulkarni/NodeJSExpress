package com.camblyprogrammingassessment.prog;

import java.util.Collections;
import java.util.Comparator;
import java.util.HashMap;
import java.util.LinkedHashMap;
import java.util.LinkedList;
import java.util.List;
import java.util.Map;
import java.util.Map.Entry;
import java.util.SortedSet;
import java.util.TreeMap;
import java.util.TreeSet;

import com.sun.source.util.Trees;

public class StringOccurence {

	public void occurenceOfString(String input) {
		Map <String, String> map = new HashMap<String, String>();
		 Map<String, String> treeMap = new TreeMap<String, String>(Collections.reverseOrder());
        if (input != null) {
        	input = input.replaceAll("\n", " ");
            String[] separatedWords = input.toLowerCase().replaceAll("[^\\w\\s\\-_]", "").split(" ");
            for (String str: separatedWords) {
                if (map.containsKey(str)) {
                    int count = Integer.parseInt(map.get(str));
                    map.put(str, String.valueOf(count + 1));
                    treeMap.putAll(map);
                    Map<String, Integer> hm1 = sortByValue(map);
               
                } else {
                    map.put(str, "1");
                }
            }
        }
 
        System.out.println("\nNumber of occurrences of each word in the string:\n" + treeMap);
	}
	
    // function to sort hashmap by values
    public static HashMap<String, String> sortByValue(HashMap<String, String> hm)
    {
        // Create a list from elements of HashMap
        List<Map.Entry<String, String> > list =
               new LinkedList<Map.Entry<String, String> >(hm.entrySet());
 
        // Sort the list
        Collections.sort(list, new Comparator<Map.Entry<String, String> >() {
            public int compare(Map.Entry<String, Integer> o1,
                               Map.Entry<String, Integer> o2)
            {
                return (o1.getValue()).compareTo(o2.getValue());
            }
        });
         
        // put data from sorted list to hashmap
        HashMap<String, Integer> temp = new LinkedHashMap<String, Integer>();
        for (Map.Entry<String, Integer> aa : list) {
            temp.put(aa.getKey(), aa.getValue());
        }
        return temp;
    }
    
    
}
