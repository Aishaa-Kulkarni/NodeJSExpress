package com.camblyprogrammingassessment.prog;

import java.util.Comparator;
import java.util.HashMap;
import java.util.Map;
import java.util.TreeMap;
import java.util.stream.Collectors;
import java.util.LinkedHashMap;

public class StringOccurence {
	static class DescOrder implements Comparator<String> {

		@Override
		public int compare(String o1, String o2) {	    
		    return o2.compareTo(o1);
		}
	    }

	public void occurenceOfString(String input) {
		Map <String, String> map = new HashMap<String, String>();
		Map<String, String> treeMap = new TreeMap<String, String>();
		Map<String, String> sortedByValueDesc = new TreeMap<String, String>();
        if (input != null) {
        	input = input.replaceAll("\n", " ");
            String[] separatedWords = input.toLowerCase().replaceAll("[^\\w\\s\\-_]", "").split(" ");
            for (String str: separatedWords) {
                if (map.containsKey(str)) {
                    int count = Integer.parseInt(map.get(str));
                    map.put(str, String.valueOf(count + 1));
                    treeMap.putAll(map);
                } else {
                    map.put(str, "1");
                }
            }
            sortedByValueDesc = treeMap
                    .entrySet()
                    .stream()
                    .sorted(Map.Entry.<String, String> comparingByValue().reversed())
                    .collect(Collectors.toMap(Map.Entry::getKey, Map.Entry::getValue, (e1, e2) -> e1,
                            LinkedHashMap::new));
            
           
        }
 
        System.out.println("Sorted value in desc"+sortedByValueDesc);
	}
	    
}
